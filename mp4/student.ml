type token =
  | INT of (int)
  | FLOAT of (float)
  | STRING of (string)
  | IDENT of (string)
  | TRUE
  | FALSE
  | NEG
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | DPLUS
  | DMINUS
  | DTIMES
  | DDIV
  | MOD
  | EXP
  | CARAT
  | LT
  | GT
  | LEQ
  | GEQ
  | EQUALS
  | NEQ
  | PIPE
  | ARROW
  | SEMI
  | DSEMI
  | DCOLON
  | NIL
  | LET
  | REC
  | AND
  | IN
  | IF
  | THEN
  | ELSE
  | FUN
  | RAISE
  | TRY
  | WITH
  | NOT
  | LOGICALAND
  | LOGICALOR
  | LBRAC
  | RBRAC
  | LPAREN
  | RPAREN
  | COMMA
  | UNDERSCORE
  | UNIT
  | HEAD
  | TAIL
  | PRINT
  | FST
  | SND
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "student.mly"
  open Common

(* You may want to add extra code here *)
    let andsugar l r = IfExp(l,r,ConstExp (BoolConst false))
    let orsugar l r = IfExp(l,ConstExp (BoolConst true),r)
    let ltsugar l r = BinOpAppExp(GreaterOp,r,l)
    let leqsugar l r = orsugar (ltsugar l r) (BinOpAppExp(EqOp, l, r))
    let geqsugar l r = orsugar (BinOpAppExp(GreaterOp,l,r)) (BinOpAppExp(EqOp, l, r))
    let neqsugar l r = IfExp(BinOpAppExp (EqOp,l,r), ConstExp (BoolConst false),
    		       			 ConstExp (BoolConst true))

# 75 "student.ml"
let yytransl_const = [|
  261 (* TRUE *);
  262 (* FALSE *);
  263 (* NEG *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* TIMES *);
  267 (* DIV *);
  268 (* DPLUS *);
  269 (* DMINUS *);
  270 (* DTIMES *);
  271 (* DDIV *);
  272 (* MOD *);
  273 (* EXP *);
  274 (* CARAT *);
  275 (* LT *);
  276 (* GT *);
  277 (* LEQ *);
  278 (* GEQ *);
  279 (* EQUALS *);
  280 (* NEQ *);
  281 (* PIPE *);
  282 (* ARROW *);
  283 (* SEMI *);
  284 (* DSEMI *);
  285 (* DCOLON *);
  286 (* NIL *);
  287 (* LET *);
  288 (* REC *);
  289 (* AND *);
  290 (* IN *);
  291 (* IF *);
  292 (* THEN *);
  293 (* ELSE *);
  294 (* FUN *);
  295 (* RAISE *);
  296 (* TRY *);
  297 (* WITH *);
  298 (* NOT *);
  299 (* LOGICALAND *);
  300 (* LOGICALOR *);
  301 (* LBRAC *);
  302 (* RBRAC *);
  303 (* LPAREN *);
  304 (* RPAREN *);
  305 (* COMMA *);
  306 (* UNDERSCORE *);
  307 (* UNIT *);
  308 (* HEAD *);
  309 (* TAIL *);
  310 (* PRINT *);
  311 (* FST *);
  312 (* SND *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* STRING *);
  260 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\004\000\004\000\004\000\004\000\004\000\004\000\
\005\000\005\000\005\000\005\000\005\000\006\000\006\000\006\000\
\006\000\006\000\002\000\007\000\007\000\009\000\009\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\013\000\013\000\
\015\000\015\000\016\000\016\000\018\000\018\000\020\000\020\000\
\022\000\022\000\022\000\024\000\024\000\023\000\023\000\027\000\
\027\000\021\000\021\000\021\000\021\000\021\000\021\000\028\000\
\028\000\029\000\031\000\031\000\008\000\008\000\010\000\010\000\
\032\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\033\000\033\000\014\000\014\000\017\000\017\000\034\000\034\000\
\019\000\019\000\019\000\035\000\035\000\025\000\025\000\030\000\
\036\000\037\000\037\000\038\000\038\000\039\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\041\000\041\000\042\000\
\042\000\043\000\043\000\044\000\044\000\045\000\045\000\047\000\
\047\000\047\000\049\000\049\000\048\000\048\000\050\000\050\000\
\046\000\046\000\046\000\046\000\046\000\026\000\026\000\026\000\
\026\000\026\000\051\000\054\000\054\000\055\000\055\000\053\000\
\052\000\056\000\056\000\056\000\000\000"

let yylen = "\002\000\
\002\000\005\000\007\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\001\000\003\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\002\000\003\000\002\000\001\000\002\000\001\000\
\001\000\004\000\008\000\006\000\004\000\006\000\002\000\001\000\
\003\000\003\000\001\000\001\000\003\000\001\000\003\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\003\000\001\000\
\001\000\001\000\002\000\003\000\002\000\001\000\002\000\003\000\
\001\000\003\000\001\000\003\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\002\000\003\000\002\000\001\000\002\000\001\000\001\000\
\006\000\006\000\008\000\004\000\002\000\001\000\001\000\001\000\
\001\000\002\000\002\000\001\000\002\000\001\000\001\000\002\000\
\002\000\001\000\002\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\004\000\007\000\009\000\135\000\005\000\006\000\
\014\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\011\000\012\000\013\000\015\000\016\000\149\000\
\000\000\134\000\000\000\027\000\000\000\029\000\000\000\031\000\
\000\000\038\000\000\000\040\000\042\000\000\000\044\000\000\000\
\046\000\047\000\048\000\049\000\050\000\000\000\000\000\072\000\
\080\000\086\000\090\000\136\000\137\000\000\000\000\000\000\000\
\000\000\000\000\093\000\053\000\000\000\000\000\139\000\146\000\
\000\000\145\000\001\000\000\000\000\000\063\000\138\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\018\000\019\000\020\000\021\000\000\000\000\000\022\000\023\000\
\025\000\026\000\024\000\000\000\000\000\057\000\051\000\000\000\
\055\000\091\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\140\000\144\000\147\000\000\000\092\000\052\000\
\028\000\000\000\030\000\071\000\034\000\076\000\032\000\074\000\
\035\000\078\000\036\000\077\000\033\000\075\000\037\000\079\000\
\039\000\081\000\041\000\000\000\043\000\085\000\045\000\087\000\
\000\000\000\000\000\000\000\000\000\000\061\000\068\000\067\000\
\058\000\064\000\000\000\000\000\142\000\143\000\141\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\148\000\060\000\000\000\000\000\062\000\065\000\000\000\000\000\
\000\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\096\000\097\000\099\000\101\000\
\102\000\109\000\111\000\113\000\115\000\117\000\118\000\119\000\
\120\000\121\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\124\000\000\000\000\000\133\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\128\000\122\000\126\000\059\000\000\000\
\000\000\000\000\000\000\123\000\000\000\098\000\100\000\105\000\
\103\000\107\000\106\000\104\000\108\000\110\000\000\000\112\000\
\114\000\116\000\000\000\000\000\000\000\132\000\000\000\000\000\
\000\000\130\000\000\000\129\000\000\000\131\000"

let yydgoto = "\002\000\
\024\000\062\000\026\000\027\000\086\000\092\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\097\000\145\000\146\000\147\000\148\000\048\000\
\049\000\050\000\051\000\181\000\182\000\183\000\184\000\185\000\
\186\000\187\000\188\000\189\000\190\000\191\000\192\000\193\000\
\194\000\222\000\052\000\053\000\063\000\108\000\151\000\066\000"

let yysindex = "\008\000\
\254\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\255\054\002\020\255\054\002\054\002\054\002\
\142\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\032\255\000\000\110\002\000\000\034\255\000\000\036\255\000\000\
\212\255\000\000\075\255\000\000\000\000\059\000\000\000\047\255\
\000\000\000\000\000\000\000\000\000\000\054\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\255\087\255\019\255\
\045\255\073\255\000\000\000\000\051\255\255\254\000\000\000\000\
\246\254\000\000\000\000\054\002\134\003\000\000\000\000\054\002\
\054\002\054\002\054\002\054\002\054\002\054\002\054\002\000\000\
\000\000\000\000\000\000\000\000\054\002\054\002\000\000\000\000\
\000\000\000\000\000\000\054\002\054\002\000\000\000\000\000\000\
\000\000\000\000\054\002\096\255\078\255\106\255\054\002\054\002\
\005\255\198\001\000\000\000\000\000\000\054\002\000\000\000\000\
\000\000\036\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\000\000\000\000\000\000\000\000\
\014\255\090\255\054\002\111\255\080\255\000\000\000\000\000\000\
\000\000\000\000\094\255\095\255\000\000\000\000\000\000\074\255\
\000\000\054\002\054\002\089\255\112\255\054\002\005\255\166\002\
\000\000\000\000\062\255\054\002\000\000\000\000\021\255\054\002\
\130\255\222\002\000\000\022\003\093\255\098\255\058\000\047\000\
\059\000\131\255\166\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\002\117\255\126\255\148\255\125\255\
\139\255\078\003\000\000\222\002\190\003\000\000\166\002\166\002\
\166\002\166\002\166\002\166\002\166\002\166\002\166\002\166\002\
\166\002\166\002\000\000\000\000\000\000\000\000\000\000\054\002\
\169\255\054\002\166\002\000\000\098\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
\000\000\000\000\140\255\152\255\142\255\000\000\166\002\054\002\
\166\002\000\000\143\255\000\000\166\002\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\136\255\000\000\
\253\254\000\000\028\000\000\000\000\000\003\002\000\000\203\001\
\000\000\000\000\000\000\000\000\000\000\115\000\030\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\086\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\137\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\136\255\253\254\028\000\
\003\002\203\001\115\000\174\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\230\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\137\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\000\000\070\000\007\000\099\255\000\000\115\255\
\189\255\185\255\190\255\123\255\137\000\114\255\000\000\187\255\
\173\255\207\255\246\255\244\255\239\255\000\000\000\000\222\255\
\150\000\049\000\000\000\025\000\000\000\000\000\000\000\191\255\
\215\000\210\255\223\255\066\255\000\000\235\255\237\255\000\000\
\077\255\000\000\227\255\100\255\000\000\105\255\101\255\000\000\
\011\000\000\000\000\000\000\000\085\000\000\000\000\000\000\000"

let yytablesize = 1270
let yytable = "\025\000\
\114\000\060\000\132\000\059\000\113\000\143\000\115\000\116\000\
\001\000\070\000\057\000\095\000\098\000\061\000\203\000\065\000\
\131\000\176\000\173\000\217\000\206\000\054\000\101\000\058\000\
\198\000\106\000\175\000\220\000\094\000\232\000\233\000\234\000\
\235\000\236\000\237\000\238\000\246\000\109\000\110\000\073\000\
\073\000\153\000\133\000\135\000\107\000\134\000\136\000\154\000\
\228\000\055\000\102\000\070\000\199\000\206\000\144\000\112\000\
\250\000\111\000\252\000\067\000\241\000\242\000\254\000\093\000\
\176\000\176\000\176\000\176\000\176\000\176\000\176\000\176\000\
\176\000\175\000\175\000\071\000\177\000\072\000\073\000\099\000\
\103\000\217\000\080\000\081\000\176\000\173\000\082\000\083\000\
\174\000\195\000\100\000\105\000\084\000\175\000\096\000\196\000\
\069\000\137\000\104\000\138\000\139\000\141\000\142\000\085\000\
\176\000\173\000\176\000\173\000\152\000\140\000\176\000\173\000\
\155\000\175\000\157\000\175\000\158\000\071\000\159\000\175\000\
\160\000\161\000\154\000\177\000\177\000\177\000\177\000\177\000\
\177\000\177\000\177\000\177\000\239\000\201\000\164\000\229\000\
\207\000\156\000\069\000\113\000\208\000\115\000\116\000\177\000\
\095\000\098\000\131\000\218\000\224\000\178\000\196\000\225\000\
\162\000\163\000\070\000\174\000\165\000\060\000\171\000\059\000\
\226\000\094\000\197\000\177\000\227\000\177\000\200\000\133\000\
\135\000\177\000\134\000\136\000\244\000\247\000\248\000\174\000\
\253\000\174\000\249\000\070\000\069\000\174\000\216\000\166\000\
\070\000\230\000\240\000\070\000\231\000\221\000\150\000\112\000\
\000\000\111\000\223\000\000\000\178\000\178\000\178\000\178\000\
\178\000\178\000\178\000\178\000\178\000\178\000\178\000\178\000\
\180\000\000\000\117\000\119\000\121\000\123\000\125\000\127\000\
\178\000\000\000\180\000\000\000\071\000\129\000\243\000\000\000\
\245\000\142\000\000\000\219\000\000\000\172\000\074\000\075\000\
\076\000\077\000\078\000\079\000\178\000\000\000\178\000\202\000\
\000\000\205\000\178\000\000\000\000\000\162\000\251\000\165\000\
\172\000\000\000\071\000\223\000\180\000\071\000\000\000\180\000\
\180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\180\000\180\000\000\000\000\000\000\000\000\000\069\000\
\000\000\202\000\205\000\180\000\172\000\172\000\172\000\172\000\
\172\000\172\000\172\000\172\000\172\000\172\000\172\000\172\000\
\118\000\120\000\122\000\124\000\126\000\128\000\000\000\180\000\
\172\000\180\000\000\000\130\000\000\000\180\000\082\000\082\000\
\082\000\082\000\082\000\082\000\000\000\179\000\080\000\081\000\
\000\000\000\000\082\000\083\000\172\000\000\000\172\000\179\000\
\084\000\000\000\172\000\000\000\087\000\088\000\082\000\082\000\
\089\000\090\000\091\000\215\000\209\000\210\000\211\000\212\000\
\213\000\214\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\117\000\119\000\121\000\123\000\125\000\127\000\129\000\
\000\000\179\000\000\000\000\000\179\000\179\000\179\000\179\000\
\179\000\179\000\179\000\179\000\179\000\179\000\179\000\179\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\179\000\000\000\089\000\089\000\089\000\089\000\089\000\089\000\
\089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
\089\000\089\000\089\000\000\000\179\000\000\000\179\000\089\000\
\000\000\000\000\179\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\089\000\089\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\118\000\
\120\000\122\000\124\000\126\000\128\000\130\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\125\000\000\000\
\054\000\054\000\094\000\094\000\094\000\000\000\000\000\054\000\
\094\000\054\000\054\000\094\000\094\000\094\000\054\000\000\000\
\094\000\094\000\094\000\054\000\094\000\054\000\054\000\000\000\
\094\000\094\000\094\000\094\000\094\000\094\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\127\000\000\000\
\056\000\056\000\095\000\095\000\095\000\000\000\000\000\056\000\
\095\000\056\000\056\000\095\000\095\000\095\000\056\000\000\000\
\095\000\095\000\095\000\056\000\095\000\056\000\056\000\000\000\
\095\000\095\000\095\000\095\000\095\000\095\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\000\000\000\000\
\054\000\054\000\094\000\094\000\094\000\000\000\000\000\054\000\
\094\000\054\000\054\000\094\000\094\000\094\000\054\000\000\000\
\094\000\094\000\094\000\054\000\094\000\054\000\054\000\000\000\
\094\000\094\000\094\000\094\000\094\000\094\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\000\000\000\000\
\056\000\056\000\095\000\095\000\095\000\000\000\000\000\056\000\
\095\000\056\000\056\000\095\000\095\000\095\000\056\000\000\000\
\095\000\095\000\095\000\056\000\095\000\056\000\056\000\000\000\
\095\000\095\000\095\000\095\000\095\000\095\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\056\000\000\000\000\000\000\000\
\012\000\000\000\000\000\013\000\014\000\015\000\000\000\000\000\
\000\000\000\000\016\000\000\000\017\000\064\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\088\000\088\000\088\000\088\000\088\000\088\000\
\088\000\088\000\088\000\000\000\088\000\088\000\088\000\088\000\
\088\000\088\000\088\000\010\000\056\000\000\000\000\000\088\000\
\012\000\000\000\000\000\013\000\014\000\015\000\000\000\000\000\
\000\000\000\000\016\000\149\000\017\000\088\000\088\000\000\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\084\000\084\000\000\000\000\000\084\000\084\000\
\000\000\000\000\000\000\000\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\010\000\011\000\000\000\000\000\084\000\
\012\000\000\000\000\000\013\000\014\000\015\000\000\000\000\000\
\000\000\000\000\016\000\000\000\017\000\084\000\084\000\000\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\083\000\083\000\000\000\000\000\083\000\083\000\
\000\000\000\000\000\000\000\000\083\000\083\000\083\000\083\000\
\083\000\083\000\083\000\010\000\056\000\000\000\000\000\083\000\
\012\000\000\000\000\000\013\000\014\000\015\000\000\000\000\000\
\000\000\000\000\016\000\000\000\017\000\083\000\083\000\000\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\056\000\000\000\000\000\000\000\
\012\000\000\000\000\000\013\000\068\000\015\000\000\000\000\000\
\000\000\000\000\016\000\000\000\017\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\167\000\000\000\000\000\000\000\
\168\000\000\000\000\000\169\000\170\000\015\000\000\000\000\000\
\000\000\000\000\016\000\000\000\017\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\056\000\000\000\000\000\000\000\
\012\000\000\000\000\000\013\000\170\000\015\000\000\000\000\000\
\000\000\000\000\016\000\000\000\017\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\167\000\000\000\000\000\000\000\
\168\000\000\000\000\000\169\000\204\000\015\000\000\000\000\000\
\000\000\000\000\016\000\000\000\017\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\056\000\000\000\000\000\000\000\
\012\000\000\000\000\000\013\000\204\000\015\000\000\000\000\000\
\000\000\000\000\016\000\000\000\017\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\056\000\000\000\000\000\000\000\
\012\000\000\000\000\000\013\000\000\000\015\000\000\000\000\000\
\000\000\000\000\016\000\000\000\017\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\167\000\000\000\000\000\000\000\
\168\000\000\000\000\000\169\000\000\000\015\000\000\000\000\000\
\000\000\000\000\016\000\000\000\017\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\023\000"

let yycheck = "\001\000\
\072\000\014\000\086\000\014\000\072\000\001\001\073\000\073\000\
\001\000\027\000\012\000\046\000\046\000\015\000\170\000\017\000\
\086\000\160\000\160\000\177\000\172\000\004\001\004\001\004\001\
\004\001\027\001\160\000\179\000\046\000\209\000\210\000\211\000\
\212\000\213\000\214\000\215\000\227\000\048\001\049\001\043\001\
\044\001\028\001\092\000\093\000\046\001\092\000\093\000\034\001\
\204\000\032\001\032\001\069\000\032\001\205\000\050\001\068\000\
\247\000\068\000\249\000\028\001\217\000\218\000\253\000\017\001\
\207\000\208\000\209\000\210\000\211\000\212\000\213\000\214\000\
\215\000\207\000\208\000\027\000\160\000\044\001\043\001\023\001\
\036\001\239\000\008\001\009\001\227\000\227\000\012\001\013\001\
\160\000\028\001\004\001\041\001\018\001\227\000\046\000\034\001\
\027\000\099\000\026\001\004\001\023\001\103\000\104\000\029\001\
\247\000\247\000\249\000\249\000\110\000\004\001\253\000\253\000\
\023\001\247\000\004\001\249\000\037\001\069\000\025\001\253\000\
\026\001\048\001\034\001\207\000\208\000\209\000\210\000\211\000\
\212\000\213\000\214\000\215\000\216\000\004\001\023\001\207\000\
\044\001\139\000\069\000\207\000\043\001\208\000\208\000\227\000\
\179\000\179\000\216\000\017\001\023\001\160\000\034\001\004\001\
\154\000\155\000\172\000\227\000\158\000\170\000\160\000\170\000\
\036\001\179\000\164\000\247\000\026\001\249\000\168\000\217\000\
\218\000\253\000\217\000\218\000\004\001\034\001\023\001\247\000\
\034\001\249\000\037\001\044\001\044\001\253\000\176\000\159\000\
\202\000\207\000\216\000\205\000\208\000\179\000\106\000\204\000\
\255\255\204\000\196\000\255\255\207\000\208\000\209\000\210\000\
\211\000\212\000\213\000\214\000\215\000\216\000\217\000\218\000\
\160\000\255\255\074\000\075\000\076\000\077\000\078\000\079\000\
\227\000\255\255\170\000\255\255\172\000\085\000\224\000\255\255\
\226\000\227\000\255\255\179\000\255\255\160\000\019\001\020\001\
\021\001\022\001\023\001\024\001\247\000\255\255\249\000\170\000\
\255\255\172\000\253\000\255\255\255\255\247\000\248\000\249\000\
\179\000\255\255\202\000\253\000\204\000\205\000\255\255\207\000\
\208\000\209\000\210\000\211\000\212\000\213\000\214\000\215\000\
\216\000\217\000\218\000\255\255\255\255\255\255\255\255\202\000\
\255\255\204\000\205\000\227\000\207\000\208\000\209\000\210\000\
\211\000\212\000\213\000\214\000\215\000\216\000\217\000\218\000\
\074\000\075\000\076\000\077\000\078\000\079\000\255\255\247\000\
\227\000\249\000\255\255\085\000\255\255\253\000\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\160\000\008\001\009\001\
\255\255\255\255\012\001\013\001\247\000\255\255\249\000\170\000\
\018\001\255\255\253\000\255\255\010\001\011\001\043\001\044\001\
\014\001\015\001\016\001\029\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\209\000\210\000\211\000\212\000\213\000\214\000\215\000\
\255\255\204\000\255\255\255\255\207\000\208\000\209\000\210\000\
\211\000\212\000\213\000\214\000\215\000\216\000\217\000\218\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\227\000\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\247\000\255\255\249\000\029\001\
\255\255\255\255\253\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\209\000\
\210\000\211\000\212\000\213\000\214\000\215\000\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\038\001\039\001\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\048\001\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\030\001\031\001\255\255\255\255\029\001\
\035\001\255\255\255\255\038\001\039\001\040\001\255\255\255\255\
\255\255\255\255\045\001\046\001\047\001\043\001\044\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\008\001\009\001\255\255\255\255\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\030\001\031\001\255\255\255\255\029\001\
\035\001\255\255\255\255\038\001\039\001\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\043\001\044\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\008\001\009\001\255\255\255\255\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\030\001\031\001\255\255\255\255\029\001\
\035\001\255\255\255\255\038\001\039\001\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\043\001\044\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\038\001\039\001\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\255\255\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\038\001\039\001\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\255\255\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\038\001\039\001\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\255\255\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\038\001\039\001\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\255\255\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\038\001\039\001\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\255\255\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\038\001\255\255\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\255\255\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\038\001\255\255\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\047\001\255\255\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  NEG\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  DPLUS\000\
  DMINUS\000\
  DTIMES\000\
  DDIV\000\
  MOD\000\
  EXP\000\
  CARAT\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  EQUALS\000\
  NEQ\000\
  PIPE\000\
  ARROW\000\
  SEMI\000\
  DSEMI\000\
  DCOLON\000\
  NIL\000\
  LET\000\
  REC\000\
  AND\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FUN\000\
  RAISE\000\
  TRY\000\
  WITH\000\
  NOT\000\
  LOGICALAND\000\
  LOGICALOR\000\
  LBRAC\000\
  RBRAC\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  UNDERSCORE\000\
  UNIT\000\
  HEAD\000\
  TAIL\000\
  PRINT\000\
  FST\000\
  SND\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  STRING\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 37 "student.mly"
                                ( (Anon ( _1)) )
# 694 "student.ml"
               : Common.dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 38 "student.mly"
                                                  ( (Let (_2,_4)) )
# 702 "student.ml"
               : Common.dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 39 "student.mly"
                                                   ( (LetRec (_3, _4, _6)) )
# 711 "student.ml"
               : Common.dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 42 "student.mly"
              ( IntConst _1 )
# 718 "student.ml"
               : 'constant_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "student.mly"
           ( BoolConst true )
# 724 "student.ml"
               : 'constant_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "student.mly"
            ( BoolConst false )
# 730 "student.ml"
               : 'constant_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 45 "student.mly"
            ( FloatConst _1 )
# 737 "student.ml"
               : 'constant_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "student.mly"
            ( NilConst )
# 743 "student.ml"
               : 'constant_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 47 "student.mly"
            ( StringConst _1 )
# 750 "student.ml"
               : 'constant_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "student.mly"
           ( UnitConst )
# 756 "student.ml"
               : 'constant_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "student.mly"
           ( HdOp )
# 762 "student.ml"
               : 'monop))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "student.mly"
           ( TlOp )
# 768 "student.ml"
               : 'monop))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "student.mly"
            ( PrintOp )
# 774 "student.ml"
               : 'monop))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "student.mly"
           ( IntNegOp )
# 780 "student.ml"
               : 'monop))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "student.mly"
           ( FstOp )
# 786 "student.ml"
               : 'monop))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "student.mly"
           ( SndOp )
# 792 "student.ml"
               : 'monop))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "student.mly"
            ( IntPlusOp )
# 798 "student.ml"
               : 'plus_minus))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "student.mly"
             ( IntMinusOp )
# 804 "student.ml"
               : 'plus_minus))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "student.mly"
             ( FloatPlusOp )
# 810 "student.ml"
               : 'plus_minus))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "student.mly"
             ( FloatMinusOp )
# 816 "student.ml"
               : 'plus_minus))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "student.mly"
             ( ConcatOp )
# 822 "student.ml"
               : 'plus_minus))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "student.mly"
             ( IntTimesOp )
# 828 "student.ml"
               : 'times_div))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "student.mly"
            ( IntDivOp )
# 834 "student.ml"
               : 'times_div))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "student.mly"
            ( ModOp )
# 840 "student.ml"
               : 'times_div))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "student.mly"
             ( FloatTimesOp )
# 846 "student.ml"
               : 'times_div))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "student.mly"
            ( FloatDivOp )
# 852 "student.ml"
               : 'times_div))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'op_exp) in
    Obj.repr(
# 73 "student.mly"
             ( _1 )
# 859 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_or_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_exp) in
    Obj.repr(
# 76 "student.mly"
                                  ( orsugar _1 _3 )
# 867 "student.ml"
               : 'op_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_exp) in
    Obj.repr(
# 77 "student.mly"
               ( _1 )
# 874 "student.ml"
               : 'op_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_and_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rel_exp) in
    Obj.repr(
# 80 "student.mly"
                                    ( andsugar _1 _3 )
# 882 "student.ml"
               : 'and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rel_exp) in
    Obj.repr(
# 81 "student.mly"
               ( _1 )
# 889 "student.ml"
               : 'and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_exp) in
    Obj.repr(
# 84 "student.mly"
                              ( BinOpAppExp (GreaterOp,_1,_3) )
# 897 "student.ml"
               : 'rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_exp) in
    Obj.repr(
# 85 "student.mly"
                                 ( BinOpAppExp (EqOp,_1,_3) )
# 905 "student.ml"
               : 'rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_exp) in
    Obj.repr(
# 86 "student.mly"
                              ( ltsugar _1 _3 )
# 913 "student.ml"
               : 'rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_exp) in
    Obj.repr(
# 87 "student.mly"
                               ( leqsugar _1 _3 )
# 921 "student.ml"
               : 'rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_exp) in
    Obj.repr(
# 88 "student.mly"
                               ( geqsugar _1 _3 )
# 929 "student.ml"
               : 'rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_exp) in
    Obj.repr(
# 89 "student.mly"
                               ( neqsugar _1 _3 )
# 937 "student.ml"
               : 'rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cons_exp) in
    Obj.repr(
# 90 "student.mly"
                     ( _1 )
# 944 "student.ml"
               : 'rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_add_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_exp) in
    Obj.repr(
# 93 "student.mly"
                                 ( BinOpAppExp(ConsOp,_1,_3) )
# 952 "student.ml"
               : 'cons_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_exp) in
    Obj.repr(
# 94 "student.mly"
               ( _1 )
# 959 "student.ml"
               : 'cons_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_add_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'plus_minus) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_exp) in
    Obj.repr(
# 97 "student.mly"
                                     ( BinOpAppExp(_2,_1,_3) )
# 968 "student.ml"
               : 'add_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_exp) in
    Obj.repr(
# 98 "student.mly"
                ( _1 )
# 975 "student.ml"
               : 'add_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_mult_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'times_div) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expo_exp) in
    Obj.repr(
# 101 "student.mly"
                                      ( BinOpAppExp(_2,_1,_3) )
# 984 "student.ml"
               : 'mult_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expo_exp) in
    Obj.repr(
# 102 "student.mly"
                       ( _1 )
# 991 "student.ml"
               : 'mult_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_app_raise_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expo_exp) in
    Obj.repr(
# 105 "student.mly"
                                    ( BinOpAppExp (ExpoOp,_1,_3) )
# 999 "student.ml"
               : 'expo_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nonop_exp) in
    Obj.repr(
# 106 "student.mly"
                           ( _1 )
# 1006 "student.ml"
               : 'expo_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_let_fun_try_monop_exp) in
    Obj.repr(
# 109 "student.mly"
                               ( _1 )
# 1013 "student.ml"
               : 'nonop_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app_raise_exp) in
    Obj.repr(
# 110 "student.mly"
                    ( _1 )
# 1020 "student.ml"
               : 'nonop_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 113 "student.mly"
               ( _1 )
# 1027 "student.ml"
               : 'app_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'monop_raise) in
    Obj.repr(
# 114 "student.mly"
                   ( _1 )
# 1034 "student.ml"
               : 'app_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pure_app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'monop_raise) in
    Obj.repr(
# 115 "student.mly"
                              ( AppExp(_1,_2) )
# 1042 "student.ml"
               : 'app_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'monop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nonop_exp) in
    Obj.repr(
# 118 "student.mly"
                           ( MonOpAppExp (_1,RaiseExp(_3)) )
# 1050 "student.ml"
               : 'monop_raise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nonop_exp) in
    Obj.repr(
# 119 "student.mly"
                      ( RaiseExp _2 )
# 1057 "student.ml"
               : 'monop_raise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 122 "student.mly"
                       ( _1 )
# 1064 "student.ml"
               : 'app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pure_app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nonapp_exp) in
    Obj.repr(
# 123 "student.mly"
                             ( AppExp(_1,_2) )
# 1072 "student.ml"
               : 'app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 126 "student.mly"
                       ( _1 )
# 1079 "student.ml"
               : 'nonapp_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_let_fun_try_monop_exp) in
    Obj.repr(
# 127 "student.mly"
                              ( _1 )
# 1086 "student.ml"
               : 'nonapp_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp_matches) in
    Obj.repr(
# 130 "student.mly"
                                    ( match _4 with (x,e,ms) -> TryWithExp (_2, x,e, ms) )
# 1094 "student.ml"
               : 'if_let_fun_try_monop_exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 131 "student.mly"
                                                        ( LetRecInExp(_3, _4, _6, _8) )
# 1104 "student.ml"
               : 'if_let_fun_try_monop_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 132 "student.mly"
                                               ( LetInExp(_2, _4, _6) )
# 1113 "student.ml"
               : 'if_let_fun_try_monop_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 133 "student.mly"
                                  ( FunExp(_2, _4) )
# 1121 "student.ml"
               : 'if_let_fun_try_monop_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 134 "student.mly"
                                                  ( IfExp(_2, _4, _6) )
# 1130 "student.ml"
               : 'if_let_fun_try_monop_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'monop) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'if_let_fun_try_monop_exp) in
    Obj.repr(
# 135 "student.mly"
                                          ( MonOpAppExp (_1,_2) )
# 1138 "student.ml"
               : 'if_let_fun_try_monop_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp_match) in
    Obj.repr(
# 138 "student.mly"
                  ( (match _1 with (x,e) -> (x,e,[])) )
# 1145 "student.ml"
               : 'exp_matches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'no_try_exp_match) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp_matches) in
    Obj.repr(
# 139 "student.mly"
                                       ( (match (_1,_3) with (x,e),(y,f,l) -> (x,e,((y,f)::l))) )
# 1153 "student.ml"
               : 'exp_matches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 142 "student.mly"
                         ( (_1, _3) )
# 1161 "student.ml"
               : 'exp_match))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "student.mly"
               ( None )
# 1167 "student.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 146 "student.mly"
         ( Some _1 )
# 1174 "student.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_or_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_and_exp) in
    Obj.repr(
# 149 "student.mly"
                                        ( orsugar _1 _3 )
# 1182 "student.ml"
               : 'pure_or_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_and_exp) in
    Obj.repr(
# 150 "student.mly"
                      ( _1 )
# 1189 "student.ml"
               : 'pure_or_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_and_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_eq_exp) in
    Obj.repr(
# 153 "student.mly"
                                        ( andsugar _1 _3 )
# 1197 "student.ml"
               : 'pure_and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_eq_exp) in
    Obj.repr(
# 154 "student.mly"
                        ( _1 )
# 1204 "student.ml"
               : 'pure_and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_rel_exp) in
    Obj.repr(
# 157 "student.mly"
                      ( _1 )
# 1211 "student.ml"
               : 'pure_eq_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_cons_exp) in
    Obj.repr(
# 160 "student.mly"
                                  ( BinOpAppExp (GreaterOp,_1,_3) )
# 1219 "student.ml"
               : 'pure_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_cons_exp) in
    Obj.repr(
# 161 "student.mly"
                                      ( BinOpAppExp (EqOp,_1,_3) )
# 1227 "student.ml"
               : 'pure_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_cons_exp) in
    Obj.repr(
# 162 "student.mly"
                                  ( ltsugar _1 _3 )
# 1235 "student.ml"
               : 'pure_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_cons_exp) in
    Obj.repr(
# 163 "student.mly"
                                   ( geqsugar _1 _3 )
# 1243 "student.ml"
               : 'pure_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_cons_exp) in
    Obj.repr(
# 164 "student.mly"
                                   ( leqsugar _1 _3 )
# 1251 "student.ml"
               : 'pure_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_cons_exp) in
    Obj.repr(
# 165 "student.mly"
                                   ( neqsugar _1 _3 )
# 1259 "student.ml"
               : 'pure_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_cons_exp) in
    Obj.repr(
# 166 "student.mly"
                         ( _1 )
# 1266 "student.ml"
               : 'pure_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_add_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_cons_exp) in
    Obj.repr(
# 169 "student.mly"
                                        ( BinOpAppExp(ConsOp,_1,_3) )
# 1274 "student.ml"
               : 'pure_cons_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_add_exp) in
    Obj.repr(
# 170 "student.mly"
                   ( _1 )
# 1281 "student.ml"
               : 'pure_cons_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_add_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'plus_minus) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_mult_exp) in
    Obj.repr(
# 173 "student.mly"
                                          ( BinOpAppExp(_2,_1,_3) )
# 1290 "student.ml"
               : 'pure_add_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_mult_exp) in
    Obj.repr(
# 174 "student.mly"
                     ( _1 )
# 1297 "student.ml"
               : 'pure_add_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_mult_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'times_div) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_expo_exp) in
    Obj.repr(
# 177 "student.mly"
                                           ( BinOpAppExp(_2,_1,_3) )
# 1306 "student.ml"
               : 'pure_mult_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_expo_exp) in
    Obj.repr(
# 178 "student.mly"
                            ( _1 )
# 1313 "student.ml"
               : 'pure_mult_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_app_raise_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_expo_exp) in
    Obj.repr(
# 181 "student.mly"
                                         ( BinOpAppExp (ExpoOp,_1,_3) )
# 1321 "student.ml"
               : 'pure_expo_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_app_raise_exp) in
    Obj.repr(
# 182 "student.mly"
                                 ( _1 )
# 1328 "student.ml"
               : 'pure_expo_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_app_exp) in
    Obj.repr(
# 185 "student.mly"
                  ( _1 )
# 1335 "student.ml"
               : 'pure_app_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pure_monop_raise) in
    Obj.repr(
# 186 "student.mly"
                       ( _1 )
# 1342 "student.ml"
               : 'pure_app_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pure_app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pure_monop_raise) in
    Obj.repr(
# 187 "student.mly"
                                  ( AppExp(_1,_2) )
# 1350 "student.ml"
               : 'pure_app_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'monop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pure_app_raise_exp) in
    Obj.repr(
# 190 "student.mly"
                                   ( MonOpAppExp(_1,RaiseExp(_3)) )
# 1358 "student.ml"
               : 'pure_monop_raise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pure_app_raise_exp) in
    Obj.repr(
# 191 "student.mly"
                              ( RaiseExp(_2) )
# 1365 "student.ml"
               : 'pure_monop_raise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 194 "student.mly"
                        ( _1 )
# 1372 "student.ml"
               : 'pure_app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pure_app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 195 "student.mly"
                                    ( AppExp(_1,_2) )
# 1380 "student.ml"
               : 'pure_app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_expression) in
    Obj.repr(
# 198 "student.mly"
                                 ( (_1, _3) )
# 1388 "student.ml"
               : 'no_try_exp_match))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_op_exp) in
    Obj.repr(
# 201 "student.mly"
                    ( _1 )
# 1395 "student.ml"
               : 'no_try_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_or_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_and_exp) in
    Obj.repr(
# 204 "student.mly"
                                         ( orsugar _1 _3 )
# 1403 "student.ml"
               : 'no_try_op_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_and_exp) in
    Obj.repr(
# 205 "student.mly"
                        ( _1 )
# 1410 "student.ml"
               : 'no_try_op_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_and_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_eq_exp) in
    Obj.repr(
# 208 "student.mly"
                                          ( andsugar _1 _3 )
# 1418 "student.ml"
               : 'no_try_and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_eq_exp) in
    Obj.repr(
# 209 "student.mly"
                         ( _1 )
# 1425 "student.ml"
               : 'no_try_and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_rel_exp) in
    Obj.repr(
# 212 "student.mly"
                        ( _1 )
# 1432 "student.ml"
               : 'no_try_eq_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_exp) in
    Obj.repr(
# 215 "student.mly"
                                    ( BinOpAppExp (GreaterOp,_1,_3) )
# 1440 "student.ml"
               : 'no_try_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_exp) in
    Obj.repr(
# 216 "student.mly"
                                        ( BinOpAppExp (EqOp,_1,_3) )
# 1448 "student.ml"
               : 'no_try_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_exp) in
    Obj.repr(
# 217 "student.mly"
                                    ( ltsugar _1 _3 )
# 1456 "student.ml"
               : 'no_try_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_exp) in
    Obj.repr(
# 218 "student.mly"
                                     ( geqsugar _1 _3 )
# 1464 "student.ml"
               : 'no_try_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_exp) in
    Obj.repr(
# 219 "student.mly"
                                     ( leqsugar _1 _3 )
# 1472 "student.ml"
               : 'no_try_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_rel_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_exp) in
    Obj.repr(
# 220 "student.mly"
                                     ( neqsugar _1 _3 )
# 1480 "student.ml"
               : 'no_try_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_exp) in
    Obj.repr(
# 221 "student.mly"
                          ( _1 )
# 1487 "student.ml"
               : 'no_try_rel_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_add_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_exp) in
    Obj.repr(
# 224 "student.mly"
                                        ( BinOpAppExp(ConsOp,_1,_3) )
# 1495 "student.ml"
               : 'no_try_cons_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_add_exp) in
    Obj.repr(
# 225 "student.mly"
                     ( _1 )
# 1502 "student.ml"
               : 'no_try_cons_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_add_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'plus_minus) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_mult_exp) in
    Obj.repr(
# 228 "student.mly"
                                            ( BinOpAppExp(_2,_1,_3) )
# 1511 "student.ml"
               : 'no_try_add_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_mult_exp) in
    Obj.repr(
# 229 "student.mly"
                       ( _1 )
# 1518 "student.ml"
               : 'no_try_add_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_mult_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'times_div) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_expo_exp) in
    Obj.repr(
# 232 "student.mly"
                                            ( BinOpAppExp(IntTimesOp,_1,_3) )
# 1527 "student.ml"
               : 'no_try_mult_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_expo_exp) in
    Obj.repr(
# 233 "student.mly"
                       ( _1 )
# 1534 "student.ml"
               : 'no_try_mult_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pure_app_raise_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_expo_exp) in
    Obj.repr(
# 236 "student.mly"
                                           ( BinOpAppExp(ExpoOp,_1,_3) )
# 1542 "student.ml"
               : 'no_try_expo_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_nonop_exp) in
    Obj.repr(
# 237 "student.mly"
                                         ( _1 )
# 1549 "student.ml"
               : 'no_try_expo_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_if_let_fun_monop_exp) in
    Obj.repr(
# 240 "student.mly"
                                 ( _1 )
# 1556 "student.ml"
               : 'no_try_nonop_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_app_raise_expression) in
    Obj.repr(
# 241 "student.mly"
                                 ( _1 )
# 1563 "student.ml"
               : 'no_try_nonop_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_app_expression) in
    Obj.repr(
# 244 "student.mly"
                           ( _1 )
# 1570 "student.ml"
               : 'no_try_app_raise_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_monop_expression) in
    Obj.repr(
# 245 "student.mly"
                             ( _1 )
# 1577 "student.ml"
               : 'no_try_app_raise_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pure_app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_monop_expression) in
    Obj.repr(
# 246 "student.mly"
                                         ( _1 )
# 1585 "student.ml"
               : 'no_try_app_raise_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'monop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_app_raise_expression) in
    Obj.repr(
# 249 "student.mly"
                                            ( MonOpAppExp(_1,RaiseExp(_3)) )
# 1593 "student.ml"
               : 'no_try_monop_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_app_raise_expression) in
    Obj.repr(
# 250 "student.mly"
                                       ( RaiseExp(_2) )
# 1600 "student.ml"
               : 'no_try_monop_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 253 "student.mly"
                         ( _1 )
# 1607 "student.ml"
               : 'no_try_app_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pure_app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_nonapp_expression) in
    Obj.repr(
# 254 "student.mly"
                                           ( AppExp(_1,_2) )
# 1615 "student.ml"
               : 'no_try_app_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 257 "student.mly"
                        ( _1 )
# 1622 "student.ml"
               : 'no_try_nonapp_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_if_let_fun_monop_exp) in
    Obj.repr(
# 258 "student.mly"
                                 ( _1 )
# 1629 "student.ml"
               : 'no_try_nonapp_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_expression) in
    Obj.repr(
# 261 "student.mly"
                                                         ( IfExp(_2,_4,_6) )
# 1638 "student.ml"
               : 'no_try_if_let_fun_monop_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_expression) in
    Obj.repr(
# 262 "student.mly"
                                                      ( LetInExp(_2,_4,_6) )
# 1647 "student.ml"
               : 'no_try_if_let_fun_monop_exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_expression) in
    Obj.repr(
# 263 "student.mly"
                                                               ( LetRecInExp(_3,_4,_6,_8) )
# 1657 "student.ml"
               : 'no_try_if_let_fun_monop_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_expression) in
    Obj.repr(
# 264 "student.mly"
                                         ( FunExp(_2, _4) )
# 1665 "student.ml"
               : 'no_try_if_let_fun_monop_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'monop) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_if_let_fun_monop_exp) in
    Obj.repr(
# 265 "student.mly"
                                         ( MonOpAppExp (_1,_2) )
# 1673 "student.ml"
               : 'no_try_if_let_fun_monop_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant_expression) in
    Obj.repr(
# 268 "student.mly"
                                ( ConstExp _1 )
# 1680 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 269 "student.mly"
            ( VarExp _1 )
# 1687 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_expression) in
    Obj.repr(
# 270 "student.mly"
                     ( _1 )
# 1694 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expression) in
    Obj.repr(
# 271 "student.mly"
                                ( _1 )
# 1701 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'monop) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 272 "student.mly"
                             ( MonOpAppExp (_1,_2) )
# 1709 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'list_contents) in
    Obj.repr(
# 275 "student.mly"
                          ( _2 )
# 1716 "student.ml"
               : 'list_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 278 "student.mly"
             ( ConstExp NilConst )
# 1722 "student.ml"
               : 'list_exp_end))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'list_tail) in
    Obj.repr(
# 279 "student.mly"
                      ( _2 )
# 1729 "student.ml"
               : 'list_exp_end))
; (fun __caml_parser_env ->
    Obj.repr(
# 282 "student.mly"
             ( ConstExp NilConst )
# 1735 "student.ml"
               : 'list_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_contents) in
    Obj.repr(
# 283 "student.mly"
                    ( _1 )
# 1742 "student.ml"
               : 'list_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'list_exp_end) in
    Obj.repr(
# 286 "student.mly"
                            ( BinOpAppExp(ConsOp,_1,_2) )
# 1750 "student.ml"
               : 'list_contents))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'par_exp_end) in
    Obj.repr(
# 289 "student.mly"
                         ( _2 )
# 1757 "student.ml"
               : 'paren_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "student.mly"
                  ( ConstExp UnitConst )
# 1763 "student.ml"
               : 'par_exp_end))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 293 "student.mly"
                        ( _1 )
# 1770 "student.ml"
               : 'par_exp_end))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 294 "student.mly"
                                       ( BinOpAppExp (CommaOp,_1,_3) )
# 1778 "student.ml"
               : 'par_exp_end))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Common.dec)
